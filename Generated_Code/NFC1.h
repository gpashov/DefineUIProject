/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : NFC1.h
**     Project     : QPExMainDeffine_V7790
**     Processor   : MK70FN1M0VMJ15
**     Component   : NFC_LDD
**     Version     : Component 01.008, Driver 01.04, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2021-04-07, 14:48, # CodeGen: 0
**     Abstract    :
**          This embedded component implements an access to an on-chip flash memory.
**          Using this component the flash memory could be written to, erased,
**          read from. Some other services would be provided, if they are supported
**          by hardware, e.g. changes of the flash memory protection state.
**     Settings    :
**          Component name                                 : NFC1
**          Device                                         : NFC
**          Clock settings                                 : 
**            Clock frequency/period                       : 9.375 MHz
**            Fast flash timing                            : Disabled
**          Interrupt service/event                        : Enabled
**            Interrupt                                    : INT_NFC
**            Interrupt priority                           : medium priority
**          Memory device organization                     : 
**            Bus width                                    : 8 bit
**            Target list                                  : 1
**              Target0                                    : 
**                Target description                       : 
**                  Page user data size [Bytes]            : 2048
**                  Page spare area size [Bytes]           : 64
**                  Page count                             : 64
**                  Block count                            : 2048
**                  LUN count                              : 1
**                  Total memory size                      : 2112 Mb (1 LUN(s) * 2048 blocks * 64 pages * (2048 data + 64 spare))
**                  Partial page programs cycles           : 4
**                Target settings                          : 
**                  Target ID                              : S34ML02G100BHI000
**                  Pins                                   : 
**                    CE                                   : 
**                      Pin                                : PTC17/CAN1_TX/UART3_TX/ENET0_1588_TMR1/FBa_CS4_b/FBa_TSIZ0/FBa_BE31_24_BLS7_0_b/NFC_CE0_b
**                      Pin signal                         : 
**                    RB                                   : 
**                      Pin                                : PTC16/CAN1_RX/UART3_RX/ENET0_1588_TMR0/FBa_CS5_b/FBa_TSIZ1/FBa_BE23_16_BLS15_8_b/NFC_RB
**                      Pin signal                         : 
**                  Partial page count                     : 1
**                  Page user data size [Bytes]            : 2048
**                  Page spare area size [Bytes]           : 64
**                  Total page count                       : 131072
**                  Block count                            : 2048
**                  Virtual page count                     : 1
**                  Virtual page user data size            : 2048
**                  Virtual page spare area size [Bytes]   : 64
**                  ECC error correction                   : 32-error (60 ECC bytes)
**                    Read page batch size                 : 4
**          Pins                                           : 
**            ALE                                          : 
**              Pin                                        : PTD9/I2C0_SDA/UART5_TX/FBa_A17/NFC_ALE
**              Pin signal                                 : 
**            CLE                                          : 
**              Pin                                        : PTD8/I2C0_SCL/UART5_RX/FBa_A16/NFC_CLE
**              Pin signal                                 : 
**            RE                                           : 
**              Pin                                        : PTD10/UART5_RTS_b/FBa_A18/NFC_RE
**              Pin signal                                 : 
**            WE                                           : 
**              Pin                                        : ADC1_SE7b/PTC11/LLWU_P11/I2C1_SDA/FTM3_CH7/I2S0_RXD1/FBa_RW_b/NFC_WE
**              Pin signal                                 : 
**            Bus width                                    : 8 bit
**              Data 0                                     : 
**                Pin                                      : ADC0_SE6b/PTD5/SPI0_PCS2/UART0_CTS_b/UART0_COL_b/FTM0_CH5/FBa_AD1/NFC_DATA0/EWM_OUT_b
**                Pin signal                               : 
**              Data 1                                     : 
**                Pin                                      : PTD4/LLWU_P14/SPI0_PCS1/UART0_RTS_b/FTM0_CH4/FBa_AD2/NFC_DATA1/EWM_IN
**                Pin signal                               : 
**              Data 2                                     : 
**                Pin                                      : ADC1_SE6b/PTC10/I2C1_SCL/FTM3_CH6/I2S0_RX_FS/FBa_AD5/NFC_DATA2/I2S1_MCLK
**                Pin signal                               : 
**              Data 3                                     : 
**                Pin                                      : ADC1_SE5b/CMP0_IN3/PTC9/FTM3_CH5/I2S0_RX_BCLK/FBa_AD6/NFC_DATA3/FTM2_FLT0
**                Pin signal                               : 
**              Data 4                                     : 
**                Pin                                      : ADC1_SE4b/CMP0_IN2/PTC8/FTM3_CH4/I2S0_MCLK/FBa_AD7/NFC_DATA4
**                Pin signal                               : 
**              Data 5                                     : 
**                Pin                                      : CMP0_IN1/PTC7/SPI0_SIN/USB_SOF_OUT/I2S0_RX_FS/FBa_AD8/NFC_DATA5
**                Pin signal                               : 
**              Data 6                                     : 
**                Pin                                      : CMP0_IN0/PTC6/LLWU_P10/SPI0_SOUT/PDB0_EXTRG/I2S0_RX_BCLK/FBa_AD9/NFC_DATA6/I2S0_MCLK
**                Pin signal                               : 
**              Data 7                                     : 
**                Pin                                      : PTC5/LLWU_P9/SPI0_SCK/LPTMR0_ALT2/I2S0_RXD0/FBa_AD10/NFC_DATA7/CMP0_OUT/I2S1_TX_FS
**                Pin signal                               : 
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnCmdError                                 : Enabled
**              OnCmdDone                                  : Enabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init        - LDD_TDeviceData* NFC1_Init(LDD_TUserData *UserDataPtr);
**         Reset       - LDD_TError NFC1_Reset(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**         ReadID      - LDD_TError NFC1_ReadID(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**         ReadPages   - LDD_TError NFC1_ReadPages(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**         WritePages  - LDD_TError NFC1_WritePages(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**         EraseBlocks - LDD_TError NFC1_EraseBlocks(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**         ReadRawPage - LDD_TError NFC1_ReadRawPage(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file NFC1.h
** @version 01.04
** @brief
**          This embedded component implements an access to an on-chip flash memory.
**          Using this component the flash memory could be written to, erased,
**          read from. Some other services would be provided, if they are supported
**          by hardware, e.g. changes of the flash memory protection state.
*/         
/*!
**  @addtogroup NFC1_module NFC1 module documentation
**  @{
*/         

#ifndef __NFC1_H
#define __NFC1_H

/* MODULE NFC1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif

/* General settings */
#define NFC1_BUS_WIDTH                                                                                                                                                                                                                                                                                                                                                                                                                                              1U
#define NFC1_TARGET_COUNT                    1U

/* Target 0 (S34ML02G100BHI000) ID */
#define S34ML02G100BHI000                    0x00U

/* Target 0 (S34ML02G100BHI000)  physical settings */
#define S34ML02G100BHI000_PHY_PAGE_USER_DATA_SIZE 0x0800U
#define S34ML02G100BHI000_PHY_PAGE_SPARE_AREA_SIZE 0x40U
#define S34ML02G100BHI000_PHY_PAGE_SIZE      0x0840U
#define S34ML02G100BHI000_PHY_PAGE_ADDRESS_MASK 0x3FU
#define S34ML02G100BHI000_PHY_PAGE_ADDRESS_SHIFT 0x00U
#define S34ML02G100BHI000_PHY_BLOCK_ADDRESS_MASK 0x07FFU
#define S34ML02G100BHI000_PHY_BLOCK_ADDRESS_SHIFT 0x06U
#define S34ML02G100BHI000_PHY_TOTAL_PAGE_COUNT 0x00020000U
#define S34ML02G100BHI000_PHY_BLOCK_COUNT    0x0800U

/* Target 0 (S34ML02G100BHI000)  logical device settings */
#define S34ML02G100BHI000_PAGE_USER_DATA_SIZE 0x0800U
#define S34ML02G100BHI000_PAGE_SPARE_AREA_SIZE 0x40U
#define S34ML02G100BHI000_PAGE_SIZE          (S34ML02G100BHI000_PAGE_USER_DATA_SIZE + S34ML02G100BHI000_PAGE_SPARE_AREA_SIZE)
#define S34ML02G100BHI000_PAGE_COUNT         0x00020000U
#define S34ML02G100BHI000_BLOCK_COUNT        0x0800U
#define S34ML02G100BHI000_BLOCK_PAGE_COUNT   (S34ML02G100BHI000_PAGE_COUNT / S34ML02G100BHI000_BLOCK_COUNT)

#define S34ML02G100BHI000_PAGE_READ_BATCH_SIZE 0x04U


/*
** ===================================================================
**     Method      :  NFC1_Init (component NFC_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the "Enable
**         in init. code" property is set to "yes" ([Enabled in init.
**         code]) value then the device is also enabled(see the
**         description of the Enable() method). In this case the
**         Enable() method is not necessary and needn't to be generated.
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* NFC1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  NFC1_Reset (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Reset" operation. The method doesn't wait for
**         the end of the operation. The [OnCmdDone()] event is called
**         as soon as the operation is done. The operation may be
**         executed with the target in any state. All pending
**         operations of the target are cancelled. The method puts the
**         target in its default power-up state. As part of the reset
**         command, all LUNs are also reset.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target identifier. If the only
**                           one target is defined (see [Target list]
**                           property) the, parameter is not used.
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_Reset(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId);

/*
** ===================================================================
**     Method      :  NFC1_ReadID (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Read ID" operation. The method doesn't wait for
**         the end of the operation. The [OnCmdDone()] event is called
**         as soon as the operation is done. The method can be used to
**         determine the JEDEC manufacturer ID and the device ID for
**         the particular NAND part by specifying an address of 00h.
**         Reading beyond the first two bytes yields values as
**         specified by the manufacturer. The method can also be used
**         to identify that the target supports the ONFI specification.
**         If the target supports the ONFI specification, then the ONFI
**         signature shall be returned. The ONFI signature is the ASCII
**         encoding of =ONFI where =O = 4Fh, =N = 4Eh, =F = 46h, and =I
**         = 49h. Reading beyond four bytes yields indeterminate values.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target identifier. If the only
**                           one target is defined (see [Target list]
**                           property) the, parameter is not used.
**     @param
**         Address         - Address. For the "Read ID" command,
**                           only addresses of 0x00h and 20h are valid.
**                           To retrieve the ONFI signature an address
**                           of 0x20h shall be entered (i.e. it is not
**                           valid to enter an address of 0x00h and read
**                           36 bytes to get the ONFI signature).
**     @param
**         Size            - Requested data size
**     @param
**         DstPtr          - Pointer to data buffer .
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_PARAM_SIZE - Size parameter value is
**                           out of range.
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_ReadID(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId, uint32_t Address, uint32_t Size, uint8_t *DstPtr);

/*
** ===================================================================
**     Method      :  NFC1_ReadPages (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Read page" operation of one or more pages. The
**         method doesn't wait for the end of the operation. The
**         [OnCmdDone()] event is always called as soon as the
**         operation is done (all pages are copied to the user provided
**         buffer). In case of error the [OnCmdError()] event is
**         invoked for each page containing unrecoverable ECC error if
**         ECC is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target id. If the only one
**                           target is defined (see [Target list]
**                           property) this parameter is not used.
**     @param
**         PageNumber      - Page number.
**     @param
**         PageCount       - Page count to read.
**     @param
**         DstPtr          - Pointer to data buffer .Pointer to
**                           data buffer . [Note:] On Kinetis and Vybrid
**                           MCUs internal DMA engine requires source
**                           buffer to be 8 bytes aligned and page user
**                           data size to be multiple of 8.
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_PARAM_RANGE - Page number parameter
**                           value is out of range.
**                           ERR_PARAM_LENGTH - Sum of Page number and
**                           Page count parameter values is out of range.
**                           ERR_PARAM_ADDRESS - Destination buffer
**                           address is not correctly aligned.
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_ReadPages(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId, uint32_t PageNumber, uint32_t PageCount, uint8_t *DstPtr);

/*
** ===================================================================
**     Method      :  NFC1_WritePages (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Write page" operation of one or more pages. The
**         method doesn't wait for the end of the operation. The
**         [OnCmdDone()] event is always called as soon as the
**         operation is done (all pages are copied to the user provided
**         buffer). In case of error the [OnCmdError()] event is
**         invoked for each page not possible to write correctly.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target id. If the only one
**                           target is defined (see [Target list]
**                           property) this parameter is not used.
**     @param
**         PageNumber      - Page number.
**     @param
**         PageCount       - Page count to read.
**     @param
**         SrcPtr          - Pointer to data buffer . [Note:] On
**                           Kinetis and Vybrid MCUs internal DMA engine
**                           requires destination buffer to be 8 bytes
**                           aligned and page user data size to be
**                           multiple of 8 .
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_PARAM_RANGE - Page number parameter
**                           value is out of range.
**                           ERR_PARAM_LENGTH - Sum of Page number and
**                           Page count parameter values is out of range.
**                           ERR_PARAM_ADDRESS - Source buffer address
**                           is not correctly aligned.
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_WritePages(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId, uint32_t PageNumber, uint32_t PageCount, uint8_t *SrcPtr);

/*
** ===================================================================
**     Method      :  NFC1_EraseBlocks (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Erase" operation of one or more block. The
**         method doesn't wait for the end of the operation. The
**         [OnCmdDone()] event is always called as soon as the
**         operation is done (all pages are copied to the user provided
**         buffer). In case of error the [OnCmdError()] event is
**         invoked for each block not possible to erase correctly.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target id. If the only one
**                           target is defined (see [Target list]
**                           property) this parameter is not used.
**     @param
**         BlockNumber     - Block number. The block
**                           number(address) can be obtain from page
**                           address according to the formula: Block
**                           address = Page address /
**                           "Target_ID"_BLOCK_PAGE_COUNT where Target
**                           ID is value of "Target ID" property.
**     @param
**         BlockCount      - Block count
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_PARAM_RANGE - Block number parameter
**                           value is out of range.
**                           ERR_PARAM_LENGTH - Sum of Block number and
**                           Block count parameter values is out of
**                           range.
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_EraseBlocks(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId, uint32_t BlockNumber, uint32_t BlockCount);

/*
** ===================================================================
**     Method      :  NFC1_ReadRawPage (component NFC_LDD)
*/
/*!
**     @brief
**         Starts the "Read page" operation of one physical page or
**         part of physical page. ECC mode is disabled. Raw data are
**         read from the physical page. The method doesn't wait for the
**         end of the operation. The [OnCmdDone()] event is always
**         called as soon as the operation is done (data are copied to
**         the user provided buffer or error appears). In case of error
**         the [OnCmdError()] event is invoked before the OnCmdDone()
**         event . This method can be used to get Bad block marker or
**         additional information from the spare area size of the page.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         TargetId        - Target id. If the only one
**                           target is defined (see [Target list]
**                           property) this parameter is not used.
**     @param
**         PhyPageNumber   - Page number.
**     @param
**         ColumnAddress   - Column address.
**     @param
**         Size            - Number of bytes to read. [Note:] On
**                           Kinetis and Vybrid MCUs internal DMA engine
**                           requires data size to be multiple of 8.
**     @param
**         DstPtr          - Pointer to data buffer. [Note:] On
**                           Kinetis and Vybrid MCUs internal DMA engine
**                           requires buffer address to be 8 bytes
**                           aligned.
**     @return
**                         - Error code, possible codes:
**                           ERR_DISABLED - Device is disabled.
**                           ERR_SPEED - The component does not work in
**                           the active speed mode.
**                           ERR_PARAM_CHIP_SELECT - Unknown target.
**                           ERR_BUSY - Target is busy (other command is
**                           pending).
**                           ERR_PARAM_RANGE - Physical page number
**                           parameter value is out of range.
**                           ERR_PARAM_LENGTH - Sum of Column address
**                           and Size parameter values is out of range.
**                           ERR_PARAM_ADDRESS - Destination buffer
**                           address is not correctly aligned.
**                           ERR_OK - Command was accepted.
*/
/* ===================================================================*/
LDD_TError NFC1_ReadRawPage(LDD_TDeviceData *DeviceDataPtr, LDD_NFC_TTargetID TargetId, uint32_t PhyPageNumber, uint32_t ColumnAddress, uint32_t Size, uint8_t *DstPtr);

/*
** ===================================================================
**     Method      :  NFC1_Interrupt (component NFC_LDD)
**
**     Description :
**         NFC interrupt handler
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(NFC1_Interrupt);

/* END NFC1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __NFC1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
